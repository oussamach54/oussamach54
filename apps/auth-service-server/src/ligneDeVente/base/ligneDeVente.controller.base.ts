/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { LigneDeVenteService } from "../ligneDeVente.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { LigneDeVenteCreateInput } from "./LigneDeVenteCreateInput";
import { LigneDeVente } from "./LigneDeVente";
import { LigneDeVenteFindManyArgs } from "./LigneDeVenteFindManyArgs";
import { LigneDeVenteWhereUniqueInput } from "./LigneDeVenteWhereUniqueInput";
import { LigneDeVenteUpdateInput } from "./LigneDeVenteUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class LigneDeVenteControllerBase {
  constructor(
    protected readonly service: LigneDeVenteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LigneDeVente })
  @nestAccessControl.UseRoles({
    resource: "LigneDeVente",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createLigneDeVente(
    @common.Body() data: LigneDeVenteCreateInput
  ): Promise<LigneDeVente> {
    return await this.service.createLigneDeVente({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [LigneDeVente] })
  @ApiNestedQuery(LigneDeVenteFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LigneDeVente",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ligneDeVentes(@common.Req() request: Request): Promise<LigneDeVente[]> {
    const args = plainToClass(LigneDeVenteFindManyArgs, request.query);
    return this.service.ligneDeVentes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LigneDeVente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "LigneDeVente",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ligneDeVente(
    @common.Param() params: LigneDeVenteWhereUniqueInput
  ): Promise<LigneDeVente | null> {
    const result = await this.service.ligneDeVente({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LigneDeVente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "LigneDeVente",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateLigneDeVente(
    @common.Param() params: LigneDeVenteWhereUniqueInput,
    @common.Body() data: LigneDeVenteUpdateInput
  ): Promise<LigneDeVente | null> {
    try {
      return await this.service.updateLigneDeVente({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LigneDeVente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "LigneDeVente",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteLigneDeVente(
    @common.Param() params: LigneDeVenteWhereUniqueInput
  ): Promise<LigneDeVente | null> {
    try {
      return await this.service.deleteLigneDeVente({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
