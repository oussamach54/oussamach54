/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Vente } from "./Vente";
import { VenteCountArgs } from "./VenteCountArgs";
import { VenteFindManyArgs } from "./VenteFindManyArgs";
import { VenteFindUniqueArgs } from "./VenteFindUniqueArgs";
import { DeleteVenteArgs } from "./DeleteVenteArgs";
import { VenteService } from "../vente.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Vente)
export class VenteResolverBase {
  constructor(
    protected readonly service: VenteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "read",
    possession: "any",
  })
  async _ventesMeta(
    @graphql.Args() args: VenteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Vente])
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "read",
    possession: "any",
  })
  async ventes(@graphql.Args() args: VenteFindManyArgs): Promise<Vente[]> {
    return this.service.ventes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Vente, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "read",
    possession: "own",
  })
  async vente(
    @graphql.Args() args: VenteFindUniqueArgs
  ): Promise<Vente | null> {
    const result = await this.service.vente(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Vente)
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "delete",
    possession: "any",
  })
  async deleteVente(
    @graphql.Args() args: DeleteVenteArgs
  ): Promise<Vente | null> {
    try {
      return await this.service.deleteVente(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
